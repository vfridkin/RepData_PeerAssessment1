myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
library(httpuv)
req <- with_config(gtoken, GET("https://api.github.com/users/jtleek/repos"))
stop_for_status(req)
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X
X <- X[sample(1:5),]
X
X$var2[c(1,3)]=NA
X
X[,1]
str(X)
X[,"var1"]
X[1:2,"var2"]
X[(X$var1<=3 & X$var3>11),]
X[(X$var1<=3|X$var3>15),]
X[(X$var1<=3|X$var3>15)]
(X$var1<=3|X$var3>15)
which(X$var2>8)
X[which(X$var2>8),]
X[(X$var2>8),]
(X$var2>8)
sort(X$var2, na.last=T)
X[order(X$var2),]
X[order(X$var2,desc=TRUE),]
X[order(X$var2,desc),]
X[order(X$var2,decreasing=T),]
X[order(X$var1, X$var2),]
X[order(X$var1, X$var2, na.last = TRUE),]
X[order(X$var1, X$var2, na.first = TRUE),]
X[order(X$var1, X$var2, na.last = F),]
X[order(X$var1, X$var2, decreasing = TRUE),]
library(plyr)
X$var4 <- rnorm(5)
X
Y <- cbind(X,rnorm(5))
Y
Y$`rnorm(5)`
`if(! file.exists( ". /data")){dir.create( "./data")}
;
`if(!file.exists(". /data")){dir.create("./data")}
;
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/restaurants.csv", method = "curl")
download.file(fileUrl,destfile="./data/restaurants.csv", method = "curl")
fileUrl
download.file(fileUrl,destfile="restaurants.csv",method = "curl")
?download.file
download.file?
download.file(fileUrl,"restaurants.csv","curl")
download.file(fileUrl,"restaurants.csv")
install.packages("plyr")
restData <- read.csv("./data/restaurants.csv")
head(restData)
tail(restData,n=3)
summary(restData)
head(restData,n=3)
str(restData)
table(restData$zipCode,useNA="ifany")
table(restData$councilDistrict,restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode>0)
colSums(is.na(restData))
colSums(restData < 0)
table(restData$zipCode %in% c("21212"))
restData[restData$zipCode %in% c("21212")),]
restData[(restData$zipCode %in% c("21212")),]
data("UCBAdmissions")
DF = as.data.frame(UCBAdmissions)
summary(DF)
DF
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
head(warpbreaks)
str(warpbreaks)
warpbreaks$replicate <- rep(1:9,len=54)
warpbreaks
xt = xtabs(breaks ~ .,DATA=warpbreaks)
xt = xtabs(breaks ~.,DATA=warpbreaks)
xt = xtabs(breaks ~.,data=warpbreaks)
xt
ftable(xt)
object.size(warpbreaks)
print(object.size(warpbreaks),units="Mb")
seq(1:10)
seq(1:100)
seq(1:100, by = 3)
seq(1,100, by = 3)
seq(1,10)
seq(1:10)
identical(seq(1:10),seq(1,10))
seq(1,100,by=10)
seq(0,100,by=10)
seq(100,0,by=10)
seq(100,0,by=-10)
seq(100,0,length=5)
x = c(seq(100,0,length=5))
x
seq(along = x)
head(restData)
restData$nearMe <- restData$neighborhood %in% c("Roland Park", "Homeland")
head(restData)
table(restData$nearMe)
restData[restData$nearMe,]
restData[restData$nearMe,restData$Location.1]
restData[restData$nearMe,]$Location.1
table(restData[restData$nearMe,]$Location.1)
restData[restData$nearMe,]$Location.1
as.list(restData[restData$nearMe,]$Location.1)
restData[restData$nearMe,]$Location.1
stack(restData[restData$nearMe,]$Location.1)
as.matrix(restData[restData$nearMe,]$Location.1)
restData$zipWrong = ifelse(restData$zipCode<0,T,F)
table(restData$zipWrong,restData$zipCode<0)
table(restData$zipWrong,restData$zipCode)
table(restData$zipWrong,restData$zipCode<0)
restData$zipGroups <- cut(restData$zipCode, breaks=quantile(restData$zipCode))
head(restData)
cut(restData$zipCode, breaks=quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups, resetData$zipCode)
table(restData$zipGroups, restData$zipCode)
library(Hmics)
library(Hmisc)
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
restData$zipGroups = cut2(restData$zipCode,g=4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
restData$zcf[1:10]
restData$zcf
class(restData$zcf)
yesno <- sample(c("yes","no","maybe"),size=13)
yesno <- sample(c("yes","no","maybe"),size=13,replace=T)
yesno
yesnofac = factor(yesno,levels=c("yes","no"))
yesnofac
yesnofac = factor(yesno,levels=c("yes","no","maybe"))
yesnofac
yesno
class(yesno)
yesnofac2 <- factor(yesno)
yesnofac2
as.numeric(yesnofac)
library(plyr)
restData2 <- mutate(resteData,zipGroups=cut2(zipCode,g=4))
restData2 <- mutate(restData,zipGroups=cut2(zipCode,g=4))
head(restData2)
head(restData)
identical(restData,restData2)
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
head(mtcars)\
mtcars$carname <- rownames(mtcars)\
head(mtcars)
carMelt <- melt(mtcars,id=c("carname", "gear", "cyl"),measure.vars=c("mpg"),"hp")
head(carMelt)
carMelt <- melt(mtcars,id=c("carname", "gear", "cyl"),measure.vars=c("mpg","hp"))
head(carMelt)
carMelt
?dcast
unique(carMelt$cyl)
unique(carMelt$variable)
cylData <- dcast(carMelt,cyl ~ variable)
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData[sort(cyclData$mpg),]
cylData[sort(cylData$mpg),]
sort(cylData$mpg)
cylData[order(cyclData$mpg),]
order(cylData,cyclData$mpg)
?order
sort(cylData,cyclData$mpg)
sort(cylData,cylData$mpg)
order(cylData,cylData$mpg)
cylData
cylData[cylData$mpg>10,]
cylData[sort(cylData$mpg),]
cylData[order(cylData$mpg),]
cylData[order(cylData$mpg,descending=T),]
cylData[order(cylData$mpg, descending=TRUE),]
cylData[order(cylData$mpg, decreasing = T),]
cylData[desc(cylData$mpg),]
cylData[desc(cylData$mpg),]
library(plyr)
cylData[desc(cylData$mpg),]
cylData[desc(mpg),]
?desc
desc(cylData$mpg)
cylData <- dcast(carMelt, cyl ~ variable)
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray,sum)
spIns <- split(InsectSprays$count, InsectSprays$spray)
spIns
class(spIns)
sprCount = lapply(spIns,sum)
sprCount
sprCount = sapply(spIns,sum)
sprCount
?ddply
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
?ave
library(dplyr)
?dplyr
install.packages("dplyr")
install.packages("dplyr")
chicago <- readRDS("chicago.rds")
library(dplyr)
chicago <- readRDS("chicago.rds")
head(chicago)
restData
names(restData)
select(restData, name:nearMe)
head(select(restData, name:nearMe))
match(zipCode,names(restData))
match("zipCode",names(restData))
restData <- rename(restData, zip = zipCode)
head(restData)
factor(c(1,0,1,1,1), labels = c("yes", "no"))
factor(c(1,0,1,1,1), labels = c("no","yes"))
factor(c(1,2,1,1,1), labels = c("no","yes"))
factor(c(1,2,1,3,1), labels = c("no","yes"))
factor(c(1,2,1,3,1), labels = c("no","yes","maybe"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url,"./data/w3q1.csv")
q1 <- read.csv("./data/w3q1.csv")
head(q1)
str(q1)
agricultureLogical <- (q1$ACR = 3) & (q1$ = 6)
agricultureLogical <- (q1$ACR == 3) & (q1$ == 6)
agricultureLogical <- (q1$ACR == 3 & q1$ == 6)
agricultureLogical <- (q1$ACR == 3 & q1$AGS == 6)
head(agricultureLogical)
agricultureLogical.length
length(agricultureLogical)
q1[which(agricultureLogical),]
head(q1[which(agricultureLogical),])
head(rownames(q1[which(agricultureLogical),])
)
install.packages("jpeg")
library(jpeg)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url,"./data/q2.jpg")
pic <- jpeg("./data/q2.jpg")
pic
plot(pic)
head(pic)
class(pic)
jpeg("./data/q2.jpg")
img <- readJPEG("./data/q2.jpg")
download.file(url,"./data/q2a.jpg")
download.file(url,"./data/q2a.jpg",method = "curl")
download.file(url,"./data/q2a.jpg")
url
url <- "http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url,"./data/q2b.jpg")
img <- readJPEG("./data/q2c.jpg")
img
head(img)
img <- readJPEG("./data/q2c.jpg", native = T)
head(img)
quantile(img,c(30,80))
?quantile
quantile(img,probs = c(30,80))
quantile(img,probs = c(0.3,0.8))
url1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url1,".data/q31.csv")
download.file(url1,"./data/q31.csv")
download.file(url2,"./data/q32.csv")
gdp <- read.csv("./data/q32.csv")
gdp <- read.csv("./data/q31.csv")
edu <- read.csv("./data/q32.csv")
str(gdp)
str(edu)
head(edu)
head(gdp)
names(gdp)
head(gdp$X)
mergeData <- merge(gdp, edu, by.x = X, by.y = CountryCode)
mergeData <- merge(gdp, edu, by.x = "X", by.y = "CountryCode")
head(mergeData)
head(mergeData$X)
any(is.na(mergeData$X))
nrow(mergeData$X)
nrows(mergeData$X)
length(mergeData$X)
mergeData <- merge(gdp, edu, by.x = "X", by.y = "CountryCode", all = F)
nrow(mergeData)
mergeData <- merge(gdp, edu, by.x = "X", by.y = "CountryCode", all = T)
nrow(mergeData)
as.matrix(mergeData$X)
mergeData <- merge(gdp, edu, by.x = "X", by.y = "CountryCode", all = F)
nrow(mergeData)
as.matrix(mergeData$X)
arrange(select(mergeData,X,Gross.domestic.product.2012),Gross.domestic.product.2012)
arrange(select(mergeData,X,Gross.domestic.product.2012),as.int(Gross.domestic.product.2012)
)
arrange(select(mergeData,X,Gross.domestic.product.2012),as.Int(Gross.domestic.product.2012))
mergeData <- mutate(mergeData,rank = as.integer(Gross.domestic.product.2012))
head(mergeData)
mergeData <- select(mergeData,X,Gross.domestic.product.2012)
head(mergeData)
mergeData <- rename(mergeData,gdpFact = Gross.domestic.product.2012)
head(mergeData)
mergeData$rank <- as.integer(mergeData$gdpFact)
head(mergeData)
mergeData
mergeData2 <- mergeData[!is.na(mergeData$gdpFact),]
mergeData2
mergeData2 <- mergeData[mergeData$gdpFact!="",]
mergeData2
length(mergeData2)
nrow(mmergeData)
nrow(mergeData2)
mergeData2$rank <- as.integer(mergeData2$gdpFact)
mergeData2
mergeData2$rank <- as.integer(as.character(mergeData2$gdpFact)
)
mergeData2
arrange(mergeData2,rank)
arrange(mergeData2,desc(rank)
)
head(gdp)
head(edu)
head(mergeData)
mergeData <- merge(gdp, edu, by.x = "X", by.y = "CountryCode", all = F)
head(mergeData)
mergeData <- rename(mergeData, gdp = Gross.domestic.product.2012)
head(mergeData)
mergeData$rank <- as.integer(as.character(mergeData$gdp))
head(mergeData)
gdp2 <- mergeData[which(mergeData$rank>=0),]
nrow(gdp2)
?ddply
ddply(gdp2,.(Income.Group), summarize, avg = mean(rank) )
gdp2$gdpGroup <- cut(gdp2$rank,breaks = quantile(gdp2$rank,length = 5))
head(gdp2)
table(gdp2$Income.Group,gdp2$gdpGroup)
gdp2$gdpGroup <- cut(gdp2$rank,breaks = quantile(gdp2$rank,length = 6))
table(gdp2$Income.Group,gdp2$gdpGroup)
gdp2$gdpGroup <- cut(gdp2$rank,breaks = quantile(gdp2$rank,probs = c(seq(0,1,length = 5))))
table(gdp2$Income.Group,gdp2$gdpGroup)
seq(0,1,length = 5)
gdp2$gdpGroup <- cut(gdp2$rank,breaks = quantile(gdp2$rank,probs = c(seq(0,1,length = 6))))
table(gdp2$Income.Group,gdp2$gdpGroup)
library(swiril)
library(swirl)
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, users %in% c("India"))
filter(cran, country %in% c("India"))
filter(cran, country == "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ipid)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb=size_mb/2^10)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes = mean(size))
swirl()
play()
nxt()
swirl()
library(dplyr)
tbl <- tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
setwd("~/Private_BackedUp/Coursera/DataScience/ReproducibleResearch/Assignment1/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
activity$date <- as.Date(activity$date, "%Y-%m-%d")
activity2 <- activity[!is.na(activity$steps),]
library(plyr)
stepsPerDay <- ddply(activity2, "date", summarise, steps = sum(steps))
stepsPerIntervalAvg <- ddply(activity2, "interval", summarise, steps = mean(steps))
maxInterval <- with(stepsPerIntervalAvg, interval[steps == max(steps)])
with(stepsPerIntervalAvg, {
plot(steps~interval, type="l",
main = "Number of steps averaged over all days", ylab = "Steps", xlab = "Interval")
})
points(100, maxInterval, pch = 1, col = "red")
legend("topright", legend = paste("Maximum", maxInterval), lwd = 2, col = "red")
points(100, maxInterval, pch = 1, col = "red")
points(0, 0, pch = 1, col = "red")
maxInterval
points(maxInterval, 100, pch = 1, col = "red")
age <- c(1,2,NA,4)
age.i <- impute(age)
library(Hmisc)
age <- c(1,2,NA,4)
age.i <- impute(age)
age.i
age
is.imputed(age.i)
activity$steps.i <- impute(activity$steps)
head(activity)
with(activity, plot(steps, date, type = "l"))
with(activity, plot(date, steps, type = "l"))
with(activity, lines(date, steps.i, type = "l", col = "blue"))
head(activity[is.na(activity$steps),])
head(activity[is.na(activity$steps),],100)
head(activity[is.na(activity$steps),activity$steps.i != 0],100)
head(activity[is.na(activity$steps) & activity$steps.i != 0, ],100)
activity$steps.i <- impute(activity$steps, median())
activity$steps.i <- impute(activity$steps, median
)
head(activity[is.na(activity$steps) & activity$steps.i != 0, ],100)
str(stepsPerDay)
24*60/5
merged <- merge(stepsPerDay, activity, by.x = date, by.y = date)
merged <- merge(stepsPerDay, activity, by.x = "date", by.y = "date")
head(merged)
dim(merged)
dim(activity)
activity[activity$date == "2012-10-02", ]
head(activity)
activity[activity$date == "2012-10-01", ]
merged <- merge(stepsPerDay, activity, by.x = "interval", by.y = "interval")
merged <- merge(stepsPerIntervalAvg, activity, by.x = "interval", by.y = "interval")
dim(merged)
dim(activity)
head(merged)
merged$steps.i <- NULL
head(merged)
merged$steps.y <- NULL
anyNA(merged)
activityNA <- activity[is.na(activity$steps),]
merged <- merge(stepsPerIntervalAvg, activityNA, by.x = "interval", by.y = "interval") #1
nrow(merged)
nrow(activityNA)
head(merged)
head(activity2)
?select.list
?select
library(dplyr)
library(dplyr)
?select
head(merged)
head(activity2)
merged2 <- select(merged, steps=steps.x, date, interval)
head(merged2)
activity3 <- rbind(activity2, merged) #3
activity3 <- rbind(activity2, merged2) #3
activity3$weekday <- weekday(activity3$date)
activity3$weekday <- weekdays(activity3$date)
head(activity3)
activity3$weekday <- ifelse(weekdays(activity3$date) %in% c("Saturday", "Sunday"), "weekend", "weekday")
head(activity3)
str(activity3)
table(activity3$weekday)
max(activity3$interval)
